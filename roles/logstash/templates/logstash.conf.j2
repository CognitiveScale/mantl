input {
{% if 'role=control' in group_names %}
  file {
    path => "/logs/mesos/mesos-master.log"
    type => "mesos-master-logs"
  }
  http {
    codec => json
    port => 5678
    type => "marathon-logs"
  }
  file {
    path => "/logs/zookeeper/*"
    type => zookeeper
  }
{% endif %}
{% if 'role=worker' in group_names %}
  file {
    path => "/logs/mesos/mesos-agent.log"
    type => "mesos-agent-logs"
  }
  file {
    path => [ "/logs/slaves/*/frameworks/*/executors/*/runs/*/stdout", "/logs/slaves/*/frameworks/*/executors/*/runs/*/stderr" ]
    type => "mesos-framework-logs"
  }
{% endif %}
  syslog {
    port => 1514
    type => "syslog"
  }
  udp {
    port => 8125
    type => statsd
  }
{% if logstash_input_log4j %}
  log4j {
    mode => "server"
    port => {{ logstash_log4j_port }}
    type => "log4j"
  }
{% endif %}

{% if logstash_input_rabbitmq %}
 rabbitmq {
    host => "{{ rabbitmq_host }}"
    port => {{ rabbitmq_port }}
    #subscription_retry_interval_seconds => {{ rabbitmq_subscription_retry_interval_seconds }}
    user => "{{ rabbitmq_user }}"
    password => "{{ rabbitmq_password }}"
    vhost => "{{ rabbitmq_vhost }}"
    ssl => {{ rabbitmq_ssl }}
    verify_ssl => {{ rabbitmq_verify_ssl }}
 }
{% endif %}
}

{# for nodejs containers #}
filter {
  if [type] == "syslog" {
    mutate {
      replace => { "host" => "{{ inventory_hostname }}" }
    }
  }
}

{% if logstash_input_rabbitmq %}
filter {
  if [@metadata][rabbitmq_properties][timestamp] {
    date {
      match => ["[@metadata][rabbitmq_properties][timestamp]", "UNIX"]
    }
  }
}
{% endif %}

filter {
  json {
    source => "message"
    target => "messageParsed"
  }
}

output {
{% if logstash_output_elasticsearch is defined %}
  elasticsearch {
  {% for key, val in logstash_output_elasticsearch.iteritems() %}
    {{ key }} => {{ val | to_nice_json }}
  {% endfor %}
  }
{% endif %}
{% if logstash_output_kafka is defined %}
  kafka {
  {% for key, val in logstash_output_kafka.iteritems() %}
    {{ key }} => {{ val | to_nice_json }}
  {% endfor %}
  }
{% endif %}
{% if logstash_output_stdout %}
  stdout {
    codec => rubydebug
  }
{% endif %}
{% if logstash_output_s3 %}

   s3 {
     access_key_id => "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
     secret_access_key => "{{ lookup('env', 'AWS_SECRET_KEY') }}"
     region => "{{ region }}"
     bucket => "{{ logstash_output_s3_bucket }}"
     size_file => 65536
     time_file => 5
  }
{% endif %}
}
